{"version":3,"sources":["webpack:///./resources/js/apis/oauth/oauth.js","webpack:///./resources/js/apis/galaxy/galaxy.js","webpack:///./resources/js/components/galaxy/GalaxyState.jsx","webpack:///./resources/js/utilities/validation-utilities.js","webpack:///./resources/js/components/galaxy/reducer.js","webpack:///./resources/js/components/galaxy/GalaxyDetailsForm.jsx","webpack:///./resources/js/components/galaxy/GalaxySamples.jsx","webpack:///./resources/js/components/galaxy/GalaxySubmitError.jsx","webpack:///./resources/js/apis/galaxy/submission.js","webpack:///./resources/js/components/galaxy/GalaxySubmission.jsx","webpack:///./resources/js/components/galaxy/GalaxyApp.jsx"],"names":["createHref","clientId","redirectUrl","concat","window","TL","BASE_URL","getWindowFeatures","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","left","_callee","href","options","regeneratorRuntime","wrap","_context","prev","next","abrupt","Promise","resolve","reject","handleGalaxyCode","code","handleGalaxyError","handleClosing","open","stop","__webpack_require__","d","__webpack_exports__","validateOauthClient","galaxy_getGalaxySamples","galaxy_removeGalaxySession","GALAXY_AJAX_URL","redirect","_x","_x2","_authenticateOauthClient","apply","this","arguments","authenticateOauthClient","GALAXY","CLIENT_ID","then","catch","response","getGalaxySamples","axios","get","_ref","data","removeGalaxySession","body","dispatchEvent","Event","GalaxyState","createContext","GalaxyStateProvider","reducer","initialState","children","react_default","a","createElement","Provider","value","useReducer","__source","fileName","lineNumber","__self","useStateValue","useContext","emailRegex","types","email","PAGE","user","validEmail","makepairedcollection","fetchingSamples","submitted","submittable","errored","state","action","type","_objectSpread","payload","test","String","toLowerCase","actions","setEmail","setMakePairedCollection","submit","submitError","oauthWindowClosed","GalaxyDetailsForm","_useStateValue2","_slicedToArray","_useStateValue2$","dispatch","galaxyUrl","decodeURI","URL","split","GalaxyDetailsForm_jsxFileName","style","fontWeight","FONT_WEIGHT_HEAVY","getI18N","target","rel","es_form","layout","hideRequiredMark","Item","label","validateStatus","help","input","onChange","e","es_checkbox","updateMakePairedCollection","checked","GalaxySamples","GalaxySamples_slicedToArray","marginBottom","SPACE_SM","GalaxySamples_jsxFileName","es_alert","message","icon","showIcon","GalaxySubmitError","GalaxySubmitError_slicedToArray","GalaxySubmitError_jsxFileName","description","exportToGalaxy","oauthCode","oauthRedirect","samples","params","_embedded","library","name","Date","now","addtohistory","oauth2","form","forms","Error","elements","JSON","stringify","GalaxySubmission","GalaxySubmission_slicedToArray","es_button","disabled","loading","onClick","result","GalaxySubmission_jsxFileName","GalaxyApp","GalaxyState_GalaxyStateProvider","GalaxyApp_jsxFileName","row","col","lg","span","offset","md","card","propTypes"],"mappings":"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","file":"js/56.bundle.js","sourcesContent":["const createHref = (clientId, redirectUrl) =>\n  `${\n    window.TL.BASE_URL\n  }api/oauth/authorize?client_id=${clientId}&response_type=code&scope=read&redirect_uri=${redirectUrl}`;\n/**\n * Create a DOMString containing a comma-separated list of window features for the pop up window.\n * @returns {string}\n */\nconst getWindowFeatures = () => {\n  /*\n  Center the opened window within the current browser.\n   */\n  const popupHeight = 400;\n  const popupWidth = 400;\n\n  // Fixes dual-screen position Most browsers Firefox\n  const dualScreenLeft =\n    typeof window.screenLeft !== \"undefined\"\n      ? window.screenLeft\n      : window.screenX;\n  const dualScreenTop =\n    typeof window.screenTop !== \"undefined\" ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : screen.width;\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : screen.height;\n\n  const left = (width - popupWidth) / 2 + dualScreenLeft;\n  const top = (height - popupHeight) / 2 + dualScreenTop;\n\n  return `top=${top},left=${left},width=${popupHeight},height=${popupHeight},scrollbars=no,status=1`;\n};\n\nexport async function authenticateOauthClient(clientId, redirectUrl) {\n  const href = createHref(clientId, redirectUrl);\n  const options = getWindowFeatures();\n\n  // Create a promise since we do not know how long the user will have the window open for.\n  return new Promise((resolve, reject) => {\n    // Create a global handler to accept the oath code.  This code is in\n    // this is called from the galaxy_auth_code.tmpl.html page after authorization\n    // is granted.\n    window.handleGalaxyCode = code => resolve(code);\n    window.handleGalaxyError = () => reject(\"ERROR\");\n    window.handleClosing = () => reject(\"CLOSED\");\n\n    window.open(href, clientId, options);\n  });\n}\n","import axios from \"axios\";\nimport { authenticateOauthClient } from \"../oauth/oauth\";\n\nconst GALAXY_AJAX_URL = `${window.TL.BASE_URL}ajax/galaxy-export`;\n\n/**\n * This will open an new window providing the user with the ability to authenticate\n * the galaxy instance if required.\n * @returns {Promise<any>}\n */\nexport function validateOauthClient() {\n  const redirect = `${window.TL.BASE_URL}galaxy/auth_code`;\n  return authenticateOauthClient(window.GALAXY.CLIENT_ID, redirect)\n    .then(code => code)\n    .catch(response => response);\n}\n\n/**\n * Get the samples that are in the cart in correct format to be sent to galaxy.\n * @returns {Promise<AxiosResponse<any> | never>}\n */\nexport const getGalaxySamples = () =>\n  axios.get(`${GALAXY_AJAX_URL}/samples`).then(({ data }) => data);\n\n/**\n * Remove galaxy from the IRIDA session.\n * @returns {Promise<AxiosResponse<any> | never>}\n */\nexport const removeGalaxySession = () =>\n  axios.get(`${GALAXY_AJAX_URL}/remove`).then(() => {\n    // Let's components depending on the galaxy session know\n    // that it is no longer available\n    document.body.dispatchEvent(new Event(\"galaxy:removal\"));\n  });\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const GalaxyState = createContext();\n\nexport const GalaxyStateProvider = ({ reducer, initialState, children }) => (\n  <GalaxyState.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </GalaxyState.Provider>\n);\n\nexport const useStateValue = () => useContext(GalaxyState);\n","const emailRegex = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n/**\n * Ensure that an email address is formatted correctly.\n * This regular expression is taken from (https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript)\n * @param {string} email address to validate\n * @returns {boolean}\n */\nexport const validateEmail = email =>\n  emailRegex.test(String(email).toLowerCase());\n","import { validateEmail } from \"../../utilities/validation-utilities\";\n\nexport const types = {\n  EMAIL_UPDATED: \"GALAXY/SET_GALAXY_EMAIL\",\n  MAKE_PAIRED_COLLECTION_UPDATED: \"GALAXY/MAKE_PAIRED_COLLECTION_UPDATED\",\n  OAUTH_WINDOW_CLOSED: \"GALAXY_OAUTH_WINDOW_CLOSED\",\n  SUBMITTABLE: \"GALAXY/SUBMITTABLE\",\n  SUBMIT: \"GALAXY/SUBMIT\",\n  SUBMIT_ERROR: \"GALAXY/SUBMIT_ERROR\"\n};\n\nexport const initialState = {\n  email: window.PAGE.user,\n  validEmail: true, // Default to true since from IRIDA\n  makepairedcollection: true,\n  fetchingSamples: false,\n  submitted: false,\n  submittable: true,\n  errored: false\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case types.EMAIL_UPDATED:\n      return {\n        ...state,\n        email: action.payload.email,\n        validEmail: validateEmail(action.payload.email)\n      };\n    case types.MAKE_PAIRED_COLLECTION_UPDATED:\n      return {\n        ...state,\n        makepairedcollection: action.payload.makepairedcollection\n      };\n    case types.OAUTH_WINDOW_CLOSED:\n      return { ...state, submittable: true, submitted: false };\n    case types.SUBMIT:\n      return { ...state, fetchingSamples: true, submitted: true };\n    case types.SUBMIT_ERROR:\n      return {\n        ...state,\n        fetchingSamples: false,\n        submittable: true,\n        submitted: false,\n        errored: true\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport const actions = {\n  setEmail: email => ({ type: types.EMAIL_UPDATED, payload: { email } }),\n  setMakePairedCollection: makepairedcollection => ({\n    type: types.MAKE_PAIRED_COLLECTION_UPDATED,\n    payload: { makepairedcollection }\n  }),\n  submit: () => ({\n    type: types.SUBMIT\n  }),\n  submitError: () => ({\n    type: types.SUBMIT_ERROR\n  }),\n  oauthWindowClosed: () => ({\n    type: types.OAUTH_WINDOW_CLOSED\n  })\n};\n","import React from \"react\";\nimport { useStateValue } from \"./GalaxyState\";\nimport { Checkbox, Form, Input } from \"antd\";\nimport { getI18N } from \"../../utilities/i18n-utilties\";\nimport { actions } from \"./reducer\";\nimport { FONT_WEIGHT_HEAVY } from \"../../styles/fonts\";\n\n/**\n * Component to display a form containing all required and user modifiable fields.\n * @param {string} email - email for galaxy\n * @param  {boolean} makepairedcollection - whether to organize data into a library\n * @param {function} updateEmail - handles updates to the email address\n * @param {function} updateMakePairedCollection - handles update to makepairedcollection\n * @returns {*}\n */\nexport function GalaxyDetailsForm() {\n  const [{ email, validEmail, makepairedcollection }, dispatch] = useStateValue();\n\n  const emailModified = e => dispatch(actions.setEmail(e.target.value));\n\n  const makePairedCollectionModified = e =>\n    updateMakePairedCollection(e.target.checked);\n\n\n  const galaxyUrl = window\n    .decodeURI(window.GALAXY.URL)\n    .split(\"/tool_runner\")[0];\n  return (\n    <div>\n      <p>\n        <span style={{ fontWeight: FONT_WEIGHT_HEAVY }}>\n          {getI18N(\"ExportToGalaxyForm.galaxy\")}\n        </span>{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer noopener\" href={galaxyUrl}>\n          {galaxyUrl}\n        </a>\n      </p>\n      <Form layout=\"vertical\" hideRequiredMark>\n        <Form.Item\n          label={getI18N(\"ExportToGalaxyForm.email\")}\n          validateStatus={validEmail ? \"success\" : \"error\"}\n          help={getI18N(\"ExportToGalaxyForm.email.help\")}\n        >\n          <Input onChange={emailModified} value={email} />\n        </Form.Item>\n        <Form.Item\n          help={getI18N(\"ExportToGalaxyForm.makepairedcollection.help\")}\n        >\n          <Checkbox\n            onChange={makePairedCollectionModified}\n            checked={makepairedcollection}\n          >\n            {getI18N(\"ExportToGalaxyForm.makepairedcollection\")}\n          </Checkbox>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useStateValue } from \"./GalaxyState\";\nimport { Alert, Icon } from \"antd\";\nimport { getI18N } from \"../../utilities/i18n-utilties\";\nimport { SPACE_SM } from \"../../styles/spacing\";\n\n/**\n * Component to display the status of fetching samples in the proper Galaxy format.\n * @param {boolean} fetching\n */\nexport function GalaxySamples() {\n  const [{ fetchingSamples }, dispatch] = useStateValue();\n\n  return (\n    <div style={{ marginBottom: SPACE_SM }}>\n      {fetchingSamples ? (\n        <Alert\n          message={getI18N(\"GalaxySamples.processing\")}\n          icon={<Icon type=\"loading\" />}\n          showIcon\n          type=\"info\"\n        />\n      ) : null}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {useStateValue} from \"./GalaxyState\";\nimport { Alert } from \"antd\";\nimport { SPACE_SM } from \"../../styles/spacing\";\nimport { getI18N } from \"../../utilities/i18n-utilties\";\n\nexport function GalaxySubmitError() {\n  const [{ errored }] = useStateValue();\n  return (\n    <div>\n      {errored ? (\n        <Alert\n          style={{ marginBottom: SPACE_SM }}\n          type=\"error\"\n          showIcon\n          message={getI18N(\"GalaxySubmissionError.message\")}\n          description={getI18N(\"GalaxySubmissionError.description\")}\n        />\n      ) : null}\n    </div>\n  );\n}\n","/**\n * Exporting samples to galaxy occurs via a form post.  This function creates\n * the structure of data that galaxy is expecting and turns it into a JSON\n * string that is put into an input on the form.  The form is then submitted,\n * which will redirect the user to the galaxy instance.\n * @param {string} email - user's galaxy email address\n * @param {boolean} makepairedcollection - if true, it organizes imported data by putting it into paired collections\n * @param {string} oauthCode - Oauth2 authentication code\n * @param {string} oauthRedirect - galaxy oauth redirect\n * @param {object} samples - sample links in format required for galaxy.\n */\nexport const exportToGalaxy = ({\n  email,\n  makepairedcollection,\n  oauthCode,\n  oauthRedirect,\n  samples\n}) => {\n  const name = `IRIDA-${Date.now()}`;\n\n  /*\n  This structure is expected by galaxy.\n   */\n  const params = {\n    _embedded: {\n      library: { name },\n      user: { email },\n      addtohistory: true, // Default according to Phil Mabon\n      makepairedcollection,\n      oauth2: {\n        code: oauthCode,\n        redirect: oauthRedirect\n      },\n      samples\n    }\n  };\n\n  /*\n  On the cart.html page, there is a form with the name \"js-galaxy-form\" that\n  will get populated with the action (galaxy url).  It has a hidden input (#js-query)\n  that we set the stringified version of the galaxy parameters to.  After updating\n  the value, the form is submitted, which will redirect us back to Galaxy.\n   */\n  const form = document.forms[\"js-galaxy-form\"];\n  if (typeof form === \"undefined\") {\n    throw new Error(`Expecting the galaxy form with name \"js-galaxy-form\"`);\n  } else {\n    const input = form.elements[\"js-query\"];\n    input.value = JSON.stringify(params);\n    form.submit();\n  }\n};\n","import React from \"react\";\nimport { useStateValue } from \"./GalaxyState\";\nimport { Button } from \"antd\";\nimport { getI18N } from \"../../utilities/i18n-utilties\";\nimport { actions } from \"./reducer\";\nimport {\n  getGalaxySamples,\n  removeGalaxySession,\n  validateOauthClient\n} from \"../../apis/galaxy/galaxy\";\nimport { exportToGalaxy } from \"../../apis/galaxy/submission\";\n\n/**\n * Component to actually send the samples to a Galaxy Client\n * @returns {*}\n */\nexport function GalaxySubmission() {\n  const [\n    { submittable, submitted, email, validEmail, makepairedcollection },\n    dispatch\n  ] = useStateValue();\n\n  function submitToGalaxy() {\n    validateOauthClient().then(result => {\n      switch (result) {\n        case \"ERROR\":\n          dispatch(actions.submitError());\n          break;\n        case \"CLOSED\":\n          dispatch(actions.oauthWindowClosed());\n          break;\n        default:\n          getGalaxySamples().then(samples => {\n            // Update the UI\n            dispatch(actions.submit());\n\n            // Tell the server that we are done with the galaxy session.\n            removeGalaxySession().then(() => {\n              // Post to Galaxy\n              exportToGalaxy({\n                email,\n                makepairedcollection,\n                oauthCode: result,\n                oauthRedirect: `${window.TL.BASE_URL}galaxy/auth_code`,\n                samples\n              });\n            });\n          });\n      }\n    });\n  }\n\n  return (\n    <Button\n      type=\"primary\"\n      disabled={!validEmail}\n      loading={submitted}\n      onClick={submitToGalaxy}\n    >\n      {getI18N(\"GalaxyFinalSubmission.submit\")}\n    </Button>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GalaxyStateProvider } from \"./GalaxyState\";\nimport { initialState, reducer } from \"./reducer\";\nimport {\n  Card,\n  Col,\n  Row\n} from \"antd\";\nimport { GalaxyDetailsForm } from \"./GalaxyDetailsForm\";\nimport { GalaxySamples } from \"./GalaxySamples\";\nimport { GalaxySubmitError } from \"./GalaxySubmitError\";\nimport { GalaxySubmission } from \"./GalaxySubmission\";\n\nexport default function GalaxyApp() {\n  return (\n    <GalaxyStateProvider initialState={initialState} reducer={reducer}>\n      <Row>\n        <Col lg={{ span: 12, offset: 6 }} md={24}>\n          <Card>\n            <GalaxyDetailsForm />\n            <GalaxySamples />\n            <GalaxySubmitError />\n            <GalaxySubmission />\n          </Card>\n        </Col>\n      </Row>\n    </GalaxyStateProvider>\n  );\n}\n\nGalaxyApp.propTypes = {};\n"],"sourceRoot":""}